{"version":3,"sources":["Header.js","TitleBar.js","TextArea.js","Editor.js","PreviewArea.js","Previewer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","Component","TitleBar","this","props","name","TextArea","id","rows","onChange","inputChange","Editor","style","boxShadow","src_TitleBar","src_TextArea","PreviewArea","dangerouslySetInnerHTML","__html","output","Previewer","src_PreviewArea","marked","setOptions","gfm","breaks","sanitize","smartLists","smartypants","xhtml","headerIds","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","input","bind","assertThisInitialized","changeOutput","event","setState","target","value","height","src_Header","src_Editor","src_Previewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAYeA,mLARX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,gBAAtB,8BAJaE,aCUNC,mLARX,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAA0BI,KAAKC,MAAMC,cAJpCJ,aCURK,mLARX,OACEV,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,YAAUS,GAAG,SAASR,UAAU,8BAA8BS,KAAK,KAAKC,SAAUN,KAAKC,MAAMM,sBAJ9ET,aCaRU,mLATX,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CAA+Ca,MAAO,CAACC,UAAW,sCAC/EjB,EAAAC,EAAAC,cAACgB,EAAD,CAAUT,KAAK,WACfT,EAAAC,EAAAC,cAACiB,EAAD,CAAUL,YAAaP,KAAKC,MAAMM,sBALrBT,aCQNe,mLARX,OACEpB,EAAAC,EAAAC,cAAA,OAAKS,GAAG,UAAUR,UAAU,WAC1BH,EAAAC,EAAAC,cAAA,QAAMmB,wBAAyB,CAACC,OAAQf,KAAKC,MAAMe,kBAJjClB,aCaXmB,mLATX,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CAA+Ca,MAAO,CAACC,UAAW,sCAC/EjB,EAAAC,EAAAC,cAACgB,EAAD,CAAUT,KAAK,cACfT,EAAAC,EAAAC,cAACuB,EAAD,CAAaF,OAAQhB,KAAKC,MAAMe,iBALhBlB,aCExBqB,IAAOC,WAAW,CAChBC,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,YAAY,EACZC,aAAa,EACbC,OAAO,EACPC,WAAW,QAqCEC,cAjCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA9B,KAAA4B,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAA9B,KAAA8B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlC,QACKmC,MAAQ,CACXC,MAAO,GACPpB,OAAQ,MAEVa,EAAKtB,YAAcsB,EAAKtB,YAAY8B,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACnBA,EAAKU,aAAeV,EAAKU,aAAaF,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAPRA,2EAUFW,GACVxC,KAAKyC,SAAS,CAAEL,MAAOI,EAAME,OAAOC,OAAS3C,KAAKuC,qDAIlDvC,KAAKyC,SAAS,CAAEzB,OAAQG,IAAOnB,KAAKmC,MAAMC,0CAI1C,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMa,MAAO,CAAEmC,OAAQ,UACpCnD,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACmD,EAAD,CAAQvC,YAAaP,KAAKO,cAC1Bd,EAAAC,EAAAC,cAACoD,EAAD,CAAW/B,OAAQhB,KAAKmC,MAAMnB,mBA1BxBlB,aCJEkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c234d86d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <a href=\"#\" className=\"navbar-brand\">Markdown Previewer</a>\n      </nav>\n    )\n  }\n}\n\nexport default Header\n","import React, { Component } from 'react';\n\nclass TitleBar extends Component {\n  render() {\n    return (\n      <div className=\"bg-dark p-1\">\n        <h3 className=\"text-light text-center\">{this.props.name}</h3>\n      </div>\n    )\n  }\n}\n\nexport default TitleBar;\n","import React, { Component } from 'react';\n\nclass TextArea extends Component {\n  render() {\n    return (\n      <code>\n        <textarea id=\"editor\" className=\"border-0 bg-light w-100 p-2\" rows=\"20\" onChange={this.props.inputChange} />\n      </code>\n    )\n  }\n}\n\nexport default TextArea;\n","import React, { Component } from 'react';\nimport TitleBar from './TitleBar.js';\nimport TextArea from './TextArea.js';\n\nclass Editor extends Component {\n  render() {\n    return (\n      <div className=\"col border-dark border h-75 p-0 bg-light m-2\" style={{boxShadow: \"0 .125rem .25rem rgba(0,0,0,.075)\"}}>\n        <TitleBar name=\"Editor\" />\n        <TextArea inputChange={this.props.inputChange} />\n      </div>\n    )\n  }\n}\n\nexport default Editor;\n","import React, { Component } from 'react';\n\nclass PreviewArea extends Component {\n  render() {\n    return (\n      <div id=\"preview\" className=\"m-0 p-2\">\n        <code dangerouslySetInnerHTML={{__html: this.props.output}} />\n      </div>\n    )\n  }\n}\n\nexport default PreviewArea;\n","import React, { Component } from 'react';\nimport TitleBar from './TitleBar.js';\nimport PreviewArea from './PreviewArea.js';\n\nclass Previewer extends Component {\n  render() {\n    return (\n      <div className=\"col border-dark border h-75 p-0 bg-light m-2\" style={{boxShadow: \"0 .125rem .25rem rgba(0,0,0,.075)\"}}>\n        <TitleBar name=\"Previewer\" />\n        <PreviewArea output={this.props.output} />\n      </div>\n    )\n  }\n}\n\nexport default Previewer;\n","import React, { Component } from 'react';\nimport marked from 'marked';\nimport Header from './Header.js';\nimport Editor from './Editor.js';\nimport Previewer from './Previewer.js';\n\nmarked.setOptions({\n  gfm: true,\n  breaks: true,\n  sanitize: false,\n  smartLists: true,\n  smartypants: false,\n  xhtml: false,\n  headerIds: false\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      output: null\n    }\n    this.inputChange = this.inputChange.bind(this);\n    this.changeOutput = this.changeOutput.bind(this);\n  }\n\n  inputChange(event) {\n    this.setState({ input: event.target.value }, this.changeOutput)\n  }\n\n  changeOutput() {\n    this.setState({ output: marked(this.state.input) })\n  }\n\n  render() {\n    return (\n      <div className=\"App\" style={{ height: \"100vh\" }}>\n        <Header />\n        <div className=\"container mt-5\">\n          <div className=\"row h-100\">\n            <Editor inputChange={this.inputChange} />\n            <Previewer output={this.state.output} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}